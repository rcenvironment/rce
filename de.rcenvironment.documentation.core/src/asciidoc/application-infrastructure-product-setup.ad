## RCE's core infrastructure and "product/application" setup

(TODO introduction)

### Overview: OSGi vs. Equinox vs. RCP

(TODO introduction)

*OSGi* is a standardized specification including concepts like:

* _bundles_ and related concepts:
** dependency management (e.g., `Import-Package` and `Require-Bundle` declarations, versioning, ...)
** the bundle life cycle, including dependency resolution, activation/deactivation, start levels, and auto-start behavior
** namespace isolation via classloader management (e.g., allowing different versions of the same library in one application)
* _services_, their life cycle, and a central service registry
* various standardized service APIs
* as one of these services, the _declarative service_ infrastructure (e.g., `OSGI-INF` declarations, `@Component` annotations, ...)

*Equinox* is the Eclipse implementation of this OSGi specification, with some additional services.

*RCP* builds on top of OSGi and Equinox, and adds higher-level concepts:

* _features_ (groups of bundles or other features)
* _product_ definitions, including _application_ definitions
* _p2 provisioning_ (asssembly/install/upgrade of the above concepts) and configuration (e.g., `.p2.inf` files)
* the "rich client" itself, with concepts like _workspaces_, _views_, and _extension points_

(TODO: Add pointers to documentation about these concepts?)

### Build tools

Our primary build system is *Tycho*, which is a Maven plugin for building RCP artifacts.
Conceptually, it works on the RCP level, and makes use of p2 installation concepts and infrastructure to assemble RCP applications and update sites.

A related build tool is *bnd*.
It is generally considered more "modern" and flexible than Tycho, and also offers IDE support.
However, it is also more limited.
It only operates on the OSGi level, with the notable extension that it can also produce p2 update sites.
As a consequence, it can *not* replace the whole Tycho build process up to the assembled product.
  
As bnd offers significant benefits, it would be conceivable to build our OSGi-level artifacts (i.e., bundles) with it, with p2 update sites as output.
Then, a subsequent Tycho build step could consume these update sites, and assemble the final product from them.
However, there is no final decision on whether to do this migration yet.


### The RCE "product"

The main product definition file for RCE is `de.rcenvironment\maven\modules\repository.mainProduct\rce_default.product`.
Although we don't use this option at this time, it is possible to have multiple products side by side.
This would allow different product variants to be built as part of the same build process.
For example, these variants could provide different feature scopes, branding, default settings, etc.

(TODO explain cosmetic settings in the product, and what parts of it we customize)

Besides these mostly cosmetic settings, however, `.product` definition files are also central for controlling the content and initialization settings of a product.

The _content_ of a product is defined by listing _features_ that are contained in it.
Features, in turn, contain other features or bundles.
As a result, this list of features transitively defines what bundles (i.e., JARs with metadata) constitute the final product.

The _initialization behavior_ of a product is influenced by two OSGi settings: _bundle auto-start flags_ and _bundle start levels_. 
(TODO continue)

### The RCE "application"


### Customizing the rce.ini


### The customized RCE launcher

